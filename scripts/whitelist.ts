// 1. Imports
import { ethers } from "hardhat"
import MerkleTree from "merkletreejs"

const { keccak256 } = ethers.utils

// 2. Whitelisted addresses
// const whitelisted = ["0xadDcb6D33B6f1b01285f5e98c0837E271A62A895", "0xb66134249278637eeC3086477f1069775fA6037A", "0xb66134249278637eeC3086477f1069775fA6037A"]
const whitelisted = [
  "0x012c86618c20716468fc7f66881c4777668c0ceb",
  "0x01864431a3b622f1ae99a56f9d11aac41eaabe2a",
  "0x020ca0f94d5572faddec766ffeec2444427ee4ee",
  "0x022cbe8e0c901975b947d6a646766b8058d9d078",
  "0x04cba99bf19958470d03be77fd1936c1ac73784d",
  "0x055b3dd1c1b70a71badc08e2fcd98615f168c6d3",
  "0x0634f95dd524f84410e3b702c9db6f04686b4404",
  "0x116c69974870f62dc39d548bccfc4ada1f4b0fd6",
  "0x1559afa98f51acc0043898be9caf9f95f52989f6",
  "0x19f84ad90b607ffff4947dbf722d1e6a54259d90",
  "0x1b6f2a19218cd4a7a8b2ad0c717699aa1826d081",
  "0x1bda0aa086cd155906a1c48c5300c8c5cb12aa84",
  "0x1e085f30bbefa6dd60b410d22e56743ca2141cc7",
  "0x21f37fd49c10cce4e0a64bf4490516bfafd02fe7",
  "0x232e355cdf3cf531bac975f1f4b759cb90c6c1f3",
  "0x23f2e85ac340a3a59186046afc0bc6e2dc5e1bd6",
  "0x24ac6c499a3007137225740117c3c682859255da",
  "0x2945722fa8a078202e12ea2892ebcff9603b843f",
  "0x2a78fe8d2dcc24b3e42fed99b35a57825bdbd5f4",
  "0x2cd0487c302547fb4da28780ab3cf862e103fe9b",
  "0x2cd0487c302547fb4da28780ab3cf862e103fe9b",
  "0x2d953cbb706f22b1266148c41c1e6d0e3131dab2",
  "0x2fa080b70191a342f604a204463ebad8d3cfde3a",
  "0x32f14803485175d0d5de4bf7c1495a0734c9aa65",
  "0x355268746329bb3bcc91bf3cef0d32882f430952",
  "0x3cd2dc32faa993c57165282610ee4f75bd943f0d",
  "0x3d38d0aa67f760bc3e26e1da3419865b594be35c",
  "0x3da9854e620801c22c15491f9b4d6bf0372296bf",
  "0x3e2fe7c66bf652f31ca2b389f3f52087e9e58e26",
  "0x401cde8096a6d9f2d70379126b871c258843146d",
  "0x4259efbde098e67cb45a8e23ff8f9a4b155d6100",
  "0x45f83eebe0e68340a9c1e5ed3fefe7a49ad5dc71",
  "0x466c2211f1babad7a1c8ed1678615dd66d714a9e",
  "0x492c7d02f7bb0c8a187aefa5f8213b1fb500fec2",
  "0x4bfccf3168205a0b376c44f5ffa8836b6e42f19a",
  "0x4ca9bb0c35f83bd0f44bbbeb02438ea2eae2e87d",
  "0x55ae66b3cf6edb92a2d590c3a14082c3de372e7c",
  "0x5773c2bfef745e6315217dc06c20778c7e622005",
  "0x592b809006056585132a6ddd1616a2b0dacb81ba",
  "0x5b53c8b380392e7eadf8cc1723b4745e9e0f9dac",
  "0x6577136ca695c780d8fca9dedcd84d2852596053",
  "0x6767a7608e1de797246f5f2b25808ba524d679f0",
  "0x69ab6a84385743268b64bd985accf14fc13fdd65",
  "0x6d8eed65083696bcb99f55bef3c4ab113f30c4fc",
  "0x6f4a8832e36968e164db5a0699b449496a8bb1ee",
  "0x7374b072f998e8f55093d68b867e701aae2f8a35",
  "0x76fb34a0ebb02bcd5b3b3450235c53de21509fd6",
  "0x77ea9e7042c3dad6ae73cd318eb02556a1fef4d7",
  "0x7d5e9455a935927d223f64ad5556114f79e46bc4",
  "0x7e1b952d601997cfcd3f2877b75de15924c76bcd",
  "0x7e86fb1799b28058f74e6ead397a3e30e6f6bccc",
  "0x87e2489e1f2295d51bc859ec70bc25422b1bc24b",
  "0x88d3ee97581eb9babe4ee190448d6ec5c541db73",
  "0x88ef844b151d19375d3e4b5e55226d105e16ea9b",
  "0x89f835176198d9824e0c1255a8e8a69a0a3661f9",
  "0x8b21720bc28d5c970adacd36148ae1d202e0cfa9",
  "0x8e011a1723ba989d75288f78b42ca7b9997b4674",
  "0x8e74b01cfb9b36ecff300505e116aab37dc9929b",
  "0x936bcebfe0b95ed95bc54cac8b1b6c958c6b46ba",
  "0x959c43593af0048416ac09a3c75ea1b745061a73",
  "0x95d79a64269296155cde6871bec98bb7b12c6ede",
  "0x965cc79c98612c728909c67f564efd0682ad2d32",
  "0x992984c607644b42d4a491f51a0191b0b59f4569",
  "0x9af86a20185e80eb08ec2c7bfd3912aa3ab68086",
  "0xa050db47160cd522d8c72066ee9c162cb4d49cac",
  "0xa0cbb2731533807889745e63fcf10c532aca0602",
  "0xa2dff5378ec7dd60fda1fe6b77f554a5829cc38b",
  "0xa3873a019ac68824907a3ad99d3e3542376573d0",
  "0xaa6b04a3245ed60210134561a6013f66202afb99",
  "0xaafb164259d27122530aef535dcd059f5b3dc844",
  "0xac314edff6037a789b444b83062a970225dbae0f",
  "0xad889ba5a5c60fdbb87b25c6477e14a578e1f681",
  "0xae3d494962fdcf949c4730c57b01966b961de739",
  "0xb111b8f4ca14e780b5663d36e32bdc1879b1f2eb",
  "0xb126ce458acad4db8ed37c1ac0e4d607a5a05aeb",
  "0xb5e6c65ecd9fee37dff13568f1ef6ce5757046df",
  "0xb5e6c65ecd9fee37dff13568f1ef6ce5757046df",
  "0xb5e6c65ecd9fee37dff13568f1ef6ce5757046df",
  "0xb5e6c65ecd9fee37dff13568f1ef6ce5757046df",
  "0xb62a844b03d56dce1b7b0e46def2cd9ea0fd712d",
  "0xb88d30581e74861f4ff25b0f1bbf72cf3e9a78e5",
  "0xb9da9e9703ce4c8744e2881892b35d0971cc8d1c",
  "0xbad01582f3fb2b0425f8f8756ee9930d37b7f884",
  "0xbef0596d947db3ede9cb4e45e287c79cefc4aa4c",
  "0xbf366ac0f44da27e9bce103329858e8758e09ab4",
  "0xbf8fe8cf39e070a52b91f04d8bef9e755eefd820",
  "0xc1170f20295f76e567fe9172f2da52b565ff163a",
  "0xc2402ddb90e98a4e2fe8f485ec1e6c5b85aeb41d",
  "0xc50f67db1b3bf43433c01f299f2e72b339b3de4b",
  "0xc7c213eae0742f04905b503834c3c8efc01ff761",
  "0xca06482af4be29595439f02c9eb2bc11456e3996",
  "0xca07eaaded2b9c1c6a4a2d7fc3a7d368f5f527ad",
  "0xcc48340a299fb089f419bb077389bd3c16106d06",
  "0xd1d9769a2ca8676028ae21fe327ea513315e0efc",
  "0xd8f67baedd64c64de33491c8558c789c3ccfe13e",
  "0xd92fe3368aa69bdf71562f1437a935286f275134",
  "0xd97fc052603cb817bd9259ef11cbca0616435953",
  "0xda035d4e5dfa3defa9cd5a57d5c2e41b1546a1d2",
  "0xdaae3e92498f7c0ea0c401d108ad4638d85c5394",
  "0xdadd973ac98e362084b9ddce297bc39f72756cee",
  "0xdc5a6f1d7706f9aca36cc7ed5cc2b6fc6901c314",
  "0xde0e5f7686597407a4c6bcdd23020f0f5337b01c",
  "0xdfeefb102ffa7c8571b00d4642a3f55514a14e90",
  "0xdfeefb102ffa7c8571b00d4642a3f55514a14e90",
  "0xe172e57511a4aed4fcd7d044fb733826890bfdb6",
  "0xe2084ccc12d19d395be0a269df11fceff67cd342",
  "0xe299a95c55ce0817cc5b1518b2fae6fedca0cac6",
  "0xe2c0a98421389da7a198e86af090452bed35e168",
  "0xe3da461e0a16dbdc212e07ecb6e17ec5fbc9e318",
  "0xe3da461e0a16dbdc212e07ecb6e17ec5fbc9e318",
  "0xe8c62258ffb540a2ffabb2d38d262d9db1d6ebe2",
  "0xea31b2bc518fe9e90cd957c7eaea9f46038777c2",
  "0xeaffb626014495a3331ed7539fd229893f57cb15",
  "0xed13f1bfc3a1dfe1d6890779f25055b41c62fe53",
  "0xf1781849fb77b1bc65ff3beed8470bd284b8df36",
  "0xf18e91f463d35ec221e5cdd0012d64f7fa159dd1",
  "0xf608319bbb76fdaf311e8115d2870f4d89bd7d87",
  "0xf9960e8cd9e7529a752ca0ec14766c57054a8898",
  "0xfb4d5aafee790296d1e35398d8e1e2259c2733b0",
  "0xfb5fb695c5f55e1d8c516523190c9148da3ea9b2",
  "0xfd69ab949039579492befb5cc17a391f85709e41",
  "0xb02ddeef9e67b7449fea9255511691450e0a605c",
  "0xa058f94b4a39d47a05d1ee207652e228ccd0ac9f",
  "0xd3291f0558b0c092233d0a4626aea2b277b63e07",
  "0x713299e8f3abe564e1a42e80071716cbcc2ad311",
  "0x055b3dd1c1b70a71badc08e2fcd98615f168c6d3",
  "0xbf366ac0f44da27e9bce103329858e8758e09ab4",
  "0x4e12494144dbd9456a93ce147fcd1207252a5655",
  "0x68cb2cada45d214a9b06e253d10635cab264677f",
  "0xdadd973ac98e362084b9ddce297bc39f72756cee",
  "0xadDcb6D33B6f1b01285f5e98c0837E271A62A895",
]
// 3. Creating a buffer since we bytes array
const padBuffer = (addr: any) => {
  return Buffer.from(addr.substr(2).padStart(32 * 2, 0), "hex")
}

// 4. Creating buffer from leaves (lowest points in tree)
const leaves = whitelisted.map((address) => padBuffer(address))
const tree = new MerkleTree(leaves, keccak256, { sort: true })

// 5. Creating a merkleRoot that we'll inject into smart contract
const merkleRoot = tree.getHexRoot()

// 6. Calculating merkleProof to check if an address is whitelisted
const merkleProof = tree.getHexProof(padBuffer("0xadDcb6D33B6f1b01285f5e98c0837E271A62A895"))

console.log(merkleRoot)
console.log(merkleProof)
